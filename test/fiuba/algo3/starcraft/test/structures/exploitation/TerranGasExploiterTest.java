package fiuba.algo3.starcraft.test.structures.exploitation;

import static org.junit.Assert.*;

import org.junit.Test;

import fiuba.algo3.starcraft.logic.player.Player;
import fiuba.algo3.starcraft.logic.player.Resources;
import fiuba.algo3.starcraft.logic.structures.GasExploiter;
import fiuba.algo3.starcraft.logic.structures.InsufficientResources;
import fiuba.algo3.starcraft.logic.templates.RefineriaTemplate;

public class TerranGasExploiterTest {

	@Test
	public void testPlayerStartWith0G() {
		Resources initialResources = new Resources(200,0);
		Player player = new Player(null, null, null, initialResources);
		assertEquals(player.getGas(), 0);
	}
	
	@Test
	public void test1TurnAdds10GWith1Refineria() throws InsufficientResources {
		Resources initialResources = new Resources(200,0);
		Player player = new Player(null, null, null, initialResources);
		RefineriaTemplate templateRefineria = RefineriaTemplate.getInstance();
		GasExploiter refineria = templateRefineria.create();
		player.pays(100,0);
		player.newStructure(refineria);
		
		player.newTurn();

		assertEquals(player.getGas(), 10);
	}

	@Test
	public void test1TurnAdds20GWith1Refineria() throws InsufficientResources {
		Resources initialResources = new Resources(200,0);
		Player player = new Player(null, null, null, initialResources);
		RefineriaTemplate templateRefineria = RefineriaTemplate.getInstance();
		GasExploiter refineria = templateRefineria.create();
		player.pays(100,0);
		player.newStructure(refineria);
		
		for(int i = 0; i < 2; i++) player.newTurn();

		assertEquals(player.getGas(), 20);
	}

	@Test
	public void test30TurnAdds600GWith2Refineria() throws InsufficientResources {
		Resources initialResources = new Resources(200,0);
		Player player = new Player(null, null, null, initialResources);
		RefineriaTemplate templateRefineria = RefineriaTemplate.getInstance();
		for(int i = 0; i < 2; i++) {
			GasExploiter refineria = templateRefineria.create();
			player.pays(100,0);
			player.newStructure(refineria);
		}
		
		for(int i = 0; i < 30; i++) player.newTurn();

		assertEquals(player.getGas(), 600);
	}
	
	@Test
	public void test2TurnAdds10GWith1RefineriaIfItLives1Turn() throws InsufficientResources {
		Resources initialResources = new Resources(200,0);
		Player player = new Player(null, null, null, initialResources);
		RefineriaTemplate templateRefineria = RefineriaTemplate.getInstance();
		GasExploiter refineria = templateRefineria.create();
		player.pays(100,0);
		player.newStructure(refineria);
		player.newTurn();

		refineria.reduceLife(750);
		player.newTurn();
		
		assertEquals(player.getGas(), 10);
	}
	
	@Test
	public void test3TurnsAdd30GWith2RefineriaAnd1Destroyed() throws InsufficientResources {
		Resources initialResources = new Resources(200,0);
		Player player = new Player(null, null, null, initialResources);
		RefineriaTemplate templateRefineria = RefineriaTemplate.getInstance();
		for(int i = 0; i < 2; i++) {
			GasExploiter refineria = templateRefineria.create();
			player.pays(100,0);
			player.newStructure(refineria);
			if (i == 0) refineria.reduceLife(750);
		}
	
		for(int i = 0; i < 3; i++) player.newTurn();
		
		assertEquals(player.getGas(), 30);
	}
	
	@Test
	public void test4TurnsLeavesPlayerWith60GIfHeBuilds4RefineriaAnd2AreDestroyedInstantly() throws InsufficientResources {
		Resources initialResources = new Resources(400,0);
		Player player = new Player(null, null, null, initialResources);
		RefineriaTemplate templateRefineria = RefineriaTemplate.getInstance();
		for(int i = 0; i < 4; i++) {
			GasExploiter refineria = templateRefineria.create();	
			player.pays(100,0);
			player.newStructure(refineria);
			if (i%2 != 0) refineria.reduceLife(750);
			player.newTurn();
		}
		assertEquals(player.getGas(), 60);
	}

}
