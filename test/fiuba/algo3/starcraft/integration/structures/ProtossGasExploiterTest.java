package fiuba.algo3.starcraft.integration.structures;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import fiuba.algo3.starcraft.logic.map.Map;
import fiuba.algo3.starcraft.logic.map.Point;
import fiuba.algo3.starcraft.logic.player.Player;
import fiuba.algo3.starcraft.logic.player.Resources;
import fiuba.algo3.starcraft.logic.structures.GasExploiter;
import fiuba.algo3.starcraft.logic.structures.builders.ProtossBuilder;
import fiuba.algo3.starcraft.logic.structures.exceptions.InsufficientResources;
import fiuba.algo3.starcraft.logic.templates.structures.protoss.AsimiladorTemplate;

public class ProtossGasExploiterTest {
	Map map;
	Point position;
	Point position2;
	Resources initialResources;
	Player player;
	@Before
	public void before() {
		initialResources = new Resources(200,0);
		map = new Map(1000);
		position = new Point(54,70);
		position2 = new Point(10,70);
		player = new Player(null, null, new ProtossBuilder(), position, initialResources, map);
	}

	@Test
	public void testPlayerStartWith0G() {
		assertEquals(player.getGas(), 0);
	}
	
	@Test
	public void test1TurnAdds10GWith1Refineria() throws InsufficientResources {
		AsimiladorTemplate templateAsimilador = new AsimiladorTemplate();
		GasExploiter asimilador = templateAsimilador.create(position);
		player.pays(100,0);
		player.receiveNewStructure(asimilador);
		
		player.newTurn();

		assertEquals(player.getGas(), 10);
	}

	@Test
	public void test1TurnAdds20GWith1Refineria() throws InsufficientResources {
		AsimiladorTemplate templateAsimilador = new AsimiladorTemplate();
		GasExploiter asimilador = templateAsimilador.create(position);
		player.pays(100,0);
		player.receiveNewStructure(asimilador);
		
		for(int i = 0; i < 2; i++) player.newTurn();

		assertEquals(player.getGas(), 20);
	}

	@Test
	public void test30TurnAdds600GWith2Refineria() throws InsufficientResources {
		AsimiladorTemplate templateAsimilador = new AsimiladorTemplate();
		for(int i = 0; i < 2; i++) {
			GasExploiter asimilador = templateAsimilador.create(position);
			player.pays(100,0);
			player.receiveNewStructure(asimilador);
		}
		
		for(int i = 0; i < 30; i++) player.newTurn();

		assertEquals(player.getGas(), 600);
	}

	@Test
	public void test1TurnAdds20GWith4AsimiladorAnd2Destroyed() throws InsufficientResources {
		player.gains(200, 0);
		AsimiladorTemplate templateAsimilador = new AsimiladorTemplate();
		for(int i = 0; i < 4; i++) {
			GasExploiter asimilador = templateAsimilador.create(position);
			player.pays(100,0);
			player.receiveNewStructure(asimilador);
			if (i%2 != 0) asimilador.reduceLife(900);
		}
	
		player.newTurn();
		
		assertEquals(player.getGas(), 20);
	}
	
	@Test
	public void test26TurnAdds260MWith2AsimiladorAnd1Destroyed() throws InsufficientResources {
		AsimiladorTemplate templateAsimilador = new AsimiladorTemplate();
		for(int i = 0; i < 2; i++) {
			GasExploiter asimilador = templateAsimilador.create(position);	
			player.pays(100,0);
			player.receiveNewStructure(asimilador);
			if (i == 0) asimilador.reduceLife(900);
		}
	
		for(int i = 0; i < 26; i++) player.newTurn();
		
		assertEquals(player.getGas(), 260);
	}
}
