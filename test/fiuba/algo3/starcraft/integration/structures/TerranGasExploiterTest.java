package fiuba.algo3.starcraft.integration.structures;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import fiuba.algo3.starcraft.logic.map.Map;
import fiuba.algo3.starcraft.logic.map.Parcel;
import fiuba.algo3.starcraft.logic.map.Point;
import fiuba.algo3.starcraft.logic.map.areas.LandType;
import fiuba.algo3.starcraft.logic.map.exceptions.NoResourcesToExtract;
import fiuba.algo3.starcraft.logic.map.resources.ReservoirType;
import fiuba.algo3.starcraft.logic.player.Player;
import fiuba.algo3.starcraft.logic.player.Resources;
import fiuba.algo3.starcraft.logic.structures.GasExploiter;
import fiuba.algo3.starcraft.logic.structures.builders.TerranBuilder;
import fiuba.algo3.starcraft.logic.structures.exceptions.InsufficientResources;
import fiuba.algo3.starcraft.logic.structures.exceptions.MissingStructureRequired;
import fiuba.algo3.starcraft.logic.structures.exceptions.TemplateNotFound;
import fiuba.algo3.starcraft.logic.templates.structures.terran.RefineriaTemplate;

public class TerranGasExploiterTest {
	Map map;
	Point position;
	Point position2;
	Resources initialResources;
	Player player;
	@Before
	public void before() {
		initialResources = new Resources(200,0);
		map = new Map(1000, null);
		position = new Point(54,70);
		position2 = new Point(10,70);
		player = new Player(null, null, new TerranBuilder(), position, initialResources, map);
	}
	
	@Test
	public void testPlayerStartWith0G() {
		assertEquals(player.getGas(), 0);
	}
	
	@Test(expected = NoResourcesToExtract.class)
	public void testRefineriaCantBeConstructedInParcelWithoutVolcano() throws InsufficientResources, MissingStructureRequired, TemplateNotFound, NoResourcesToExtract {
		player.newStructureWithName("Refineria", position);
	}
	
	@Test
	public void testRefineriaCanBeConstructedInParcelWithVolcano() throws InsufficientResources, MissingStructureRequired, TemplateNotFound, NoResourcesToExtract {
		Parcel parcel = map.getParcelContainingPoint(position);
		parcel.setSurface(LandType.land);
		parcel.setSurface(ReservoirType.volcano);
		
		player.newStructureWithName("Refineria", position);
		for(int i = 0; i < 7; i++) player.newTurn();
		
		assertEquals(parcel.getStructure().getName(), "Refineria");
	}
	
	@Test
	public void test1TurnAdds10GWith1Refineria() throws InsufficientResources {
		RefineriaTemplate templateRefineria = new RefineriaTemplate();
		GasExploiter refineria = templateRefineria.create(position);
		player.pays(100,0);
		player.receiveNewStructure(refineria);
		
		player.newTurn();

		assertEquals(player.getGas(), 10);
	}

	@Test
	public void test1TurnAdds20GWith1Refineria() throws InsufficientResources {
		RefineriaTemplate templateRefineria = new RefineriaTemplate();
		GasExploiter refineria = templateRefineria.create(position);
		player.pays(100,0);
		player.receiveNewStructure(refineria);
		
		for(int i = 0; i < 2; i++) player.newTurn();

		assertEquals(player.getGas(), 20);
	}

	@Test
	public void test30TurnAdds600GWith2Refineria() throws InsufficientResources {
		RefineriaTemplate templateRefineria = new RefineriaTemplate();
		for(int i = 0; i < 2; i++) {
			GasExploiter refineria = templateRefineria.create(position);
			player.pays(100,0);
			player.receiveNewStructure(refineria);
		}
		
		for(int i = 0; i < 30; i++) player.newTurn();

		assertEquals(player.getGas(), 600);
	}
	
	@Test
	public void test2TurnAdds10GWith1RefineriaIfItLives1Turn() throws InsufficientResources {
		RefineriaTemplate templateRefineria = new RefineriaTemplate();
		GasExploiter refineria = templateRefineria.create(position);
		player.pays(100,0);
		player.receiveNewStructure(refineria);
		player.newTurn();

		refineria.reduceLife(750);
		player.newTurn();
		
		assertEquals(player.getGas(), 10);
	}
	
	@Test
	public void test3TurnsAdd30GWith2RefineriaAnd1Destroyed() throws InsufficientResources {
		RefineriaTemplate templateRefineria = new RefineriaTemplate();
		for(int i = 0; i < 2; i++) {
			GasExploiter refineria = templateRefineria.create(position);
			player.pays(100,0);
			player.receiveNewStructure(refineria);
			if (i == 0) refineria.reduceLife(750);
		}
	
		for(int i = 0; i < 3; i++) player.newTurn();
		
		assertEquals(player.getGas(), 30);
	}
	
	@Test
	public void test4TurnsLeavesPlayerWith60GIfHeBuilds4RefineriaAnd2AreDestroyedInstantly() throws InsufficientResources {
		player.gains(200, 0);
		RefineriaTemplate templateRefineria = new RefineriaTemplate();
		for(int i = 0; i < 4; i++) {
			GasExploiter refineria = templateRefineria.create(position);	
			player.pays(100,0);
			player.receiveNewStructure(refineria);
			if (i%2 != 0) refineria.reduceLife(750);
			player.newTurn();
		}
		assertEquals(player.getGas(), 60);
	}

}
