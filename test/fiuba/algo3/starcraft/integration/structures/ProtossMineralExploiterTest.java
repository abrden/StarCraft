package fiuba.algo3.starcraft.integration.structures;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import fiuba.algo3.starcraft.logic.map.Map;
import fiuba.algo3.starcraft.logic.map.Parcel;
import fiuba.algo3.starcraft.logic.map.Point;
import fiuba.algo3.starcraft.logic.map.areas.LandType;
import fiuba.algo3.starcraft.logic.map.exceptions.NoResourcesToExtract;
import fiuba.algo3.starcraft.logic.map.resources.ReservoirType;
import fiuba.algo3.starcraft.logic.player.Player;
import fiuba.algo3.starcraft.logic.player.Resources;
import fiuba.algo3.starcraft.logic.structures.MineralExploiter;
import fiuba.algo3.starcraft.logic.structures.builders.ProtossBuilder;
import fiuba.algo3.starcraft.logic.structures.exceptions.InsufficientResources;
import fiuba.algo3.starcraft.logic.structures.exceptions.MissingStructureRequired;
import fiuba.algo3.starcraft.logic.structures.exceptions.TemplateNotFound;
import fiuba.algo3.starcraft.logic.templates.structures.protoss.NexoMineralTemplate;

public class ProtossMineralExploiterTest {
	Map map;
	Point position;
	Point position2;
	Resources initialResources;
	Player player;
	@Before
	public void before() {
		initialResources = new Resources(200,0);
		map = new Map(1000, null);
		position = new Point(54,70);
		position2 = new Point(10,70);
		player = new Player(null, null, new ProtossBuilder(), position, initialResources, map);
	}
	
	@Test
	public void testPlayerStartWith200M() {
		assertEquals(player.getMineral(), 200);
	}
	
	@Test(expected = NoResourcesToExtract.class)
	public void testNexoCantBeConstructedInParcelWithoutMine() throws InsufficientResources, MissingStructureRequired, TemplateNotFound, NoResourcesToExtract {
		player.newStructureWithName("Nexo Mineral", position);
	}
	
	@Test
	public void testNexoCanBeConstructedInParcelWithMine() throws InsufficientResources, MissingStructureRequired, TemplateNotFound, NoResourcesToExtract {
		Parcel parcel = map.getParcelContainingPoint(position);
		parcel.setSurface(LandType.land);
		parcel.setSurface(ReservoirType.mine);
		
		player.newStructureWithName("Nexo Mineral", position);
		for(int i = 0; i < 5; i++) player.newTurn();
		
		assertEquals(parcel.getStructure().getName(), "Nexo Mineral");
	}
	
	@Test
	public void test1TurnAdds10MWith1NexoMineral() throws InsufficientResources {
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
		MineralExploiter nexoMineral = templateNexo.create(position);
		player.pays(50,0);
		player.receiveNewStructure(nexoMineral);
		
		player.newTurn();

		assertEquals(player.getMineral(), 160);
	}

	@Test
	public void test1TurnAdds40M4NexoMineral() throws InsufficientResources {
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
		for(int i = 0; i < 4; i++) {
			MineralExploiter nexoMineral = templateNexo.create(position);
			player.pays(50,0);
			player.receiveNewStructure(nexoMineral);
		}
	
		player.newTurn();
		
		assertEquals(player.getMineral(), 40);
	}

	@Test
	public void test30TurnsAdd1200MWith4NexoMineral() throws InsufficientResources {
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
		for(int i = 0; i < 4; i++) {
			MineralExploiter nexoMineral = templateNexo.create(position);	
			player.pays(50,0);
			player.receiveNewStructure(nexoMineral);
		}
	
		for(int i = 0; i < 30; i++) player.newTurn();
		
		assertEquals(player.getMineral(), 1200);
	}
	
	@Test
	public void test2TurnAdds10MWith1NexoMineralIfItLives1Turn() throws InsufficientResources {
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
		MineralExploiter nexoMineral = templateNexo.create(position);
		player.pays(50,0);
		player.receiveNewStructure(nexoMineral);
		player.newTurn();

		nexoMineral.reduceLife(500);
		player.newTurn();
		
		assertEquals(player.getMineral(), 160);
	}
	
	@Test
	public void test3TurnsAdd30MWith3NexoMineralAnd2Destroyed() throws InsufficientResources {
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
		for(int i = 0; i < 3; i++) {
			MineralExploiter nexoMineral = templateNexo.create(position);	
			player.pays(50,0);
			player.receiveNewStructure(nexoMineral);
			if (i != 0) nexoMineral.reduceLife(500);
		}
	
		for(int i = 0; i < 3; i++) player.newTurn();
		
		//Le quedaron 50M de los 200M iniciales
		assertEquals(player.getMineral(), 80);
	}
	
	@Test
	public void test4TurnsLeavesPlayerWith60MIfHeBuilds4NexoMineralAnd2AreDestroyedInstantly() throws InsufficientResources {
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
		for(int i = 0; i < 4; i++) {
			MineralExploiter nexoMineral = templateNexo.create(position);	
			player.pays(50,0);
			player.receiveNewStructure(nexoMineral);
			if (i%2 != 0) nexoMineral.reduceLife(500);
			player.newTurn();
		}

		assertEquals(player.getMineral(), 60);
	}
}
