package fiuba.algo3.starcraft.integration.structures;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import fiuba.algo3.starcraft.logic.map.Map;
import fiuba.algo3.starcraft.logic.map.Point;
import fiuba.algo3.starcraft.logic.player.Player;
import fiuba.algo3.starcraft.logic.player.Resources;
import fiuba.algo3.starcraft.logic.structures.MineralExploiter;
import fiuba.algo3.starcraft.logic.structures.builders.ProtossBuilder;
import fiuba.algo3.starcraft.logic.structures.exceptions.InsufficientResources;
import fiuba.algo3.starcraft.logic.templates.structures.protoss.NexoMineralTemplate;

public class ProtossMineralExploiterTest {
	Map map;
	Point position;
	Point position2;
	Resources initialResources;
	Player player;
	@Before
	public void before() {
		initialResources = new Resources(200,0);
		map = new Map(1000);
		position = new Point(54,70);
		position2 = new Point(10,70);
		player = new Player(null, null, new ProtossBuilder(), position, initialResources, map);
	}
	
	@Test
	public void testPlayerStartWith200M() {
<<<<<<< HEAD:test/fiuba/algo3/starcraft/logic/test/player/integration/structures/ProtossMineralExploiterTest.java
		Resources initialResources = new Resources(200,0);
		Player player = new Player(null, null, null, null, initialResources, null);
=======
>>>>>>> 824aaf7355d45cd0f5838133b0fed5b3b78765f8:test/fiuba/algo3/starcraft/integration/structures/ProtossMineralExploiterTest.java
		assertEquals(player.getMineral(), 200);
	}
	
	@Test
	public void test1TurnAdds10MWith1NexoMineral() throws InsufficientResources {
<<<<<<< HEAD:test/fiuba/algo3/starcraft/logic/test/player/integration/structures/ProtossMineralExploiterTest.java
		Resources initialResources = new Resources(200,0);
<<<<<<< HEAD
		Player player = new Player(null, null, null, null, initialResources, null);
		NexoMineralTemplate templateNexo = NexoMineralTemplate.getInstance();
=======
		Player player = new Player(null, null, null, null, initialResources);
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
>>>>>>> 60e498f1e7e1aa5a87dcdeb177fa693c0e02424f
		MineralExploiter nexoMineral = templateNexo.create(null);
=======
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
		MineralExploiter nexoMineral = templateNexo.create(position);
>>>>>>> 824aaf7355d45cd0f5838133b0fed5b3b78765f8:test/fiuba/algo3/starcraft/integration/structures/ProtossMineralExploiterTest.java
		player.pays(50,0);
		player.receiveNewStructure(nexoMineral);
		
		player.newTurn();

		assertEquals(player.getMineral(), 160);
	}

	@Test
	public void test1TurnAdds40M4NexoMineral() throws InsufficientResources {
<<<<<<< HEAD:test/fiuba/algo3/starcraft/logic/test/player/integration/structures/ProtossMineralExploiterTest.java
		Resources initialResources = new Resources(200,0);
<<<<<<< HEAD
		Player player = new Player(null, null, null, null, initialResources, null);
		NexoMineralTemplate templateNexo = NexoMineralTemplate.getInstance();
=======
		Player player = new Player(null, null, null, null, initialResources);
=======
>>>>>>> 824aaf7355d45cd0f5838133b0fed5b3b78765f8:test/fiuba/algo3/starcraft/integration/structures/ProtossMineralExploiterTest.java
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
>>>>>>> 60e498f1e7e1aa5a87dcdeb177fa693c0e02424f
		for(int i = 0; i < 4; i++) {
			MineralExploiter nexoMineral = templateNexo.create(position);
			player.pays(50,0);
			player.receiveNewStructure(nexoMineral);
		}
	
		player.newTurn();
		
		assertEquals(player.getMineral(), 40);
	}

	@Test
	public void test30TurnsAdd1200MWith4NexoMineral() throws InsufficientResources {
<<<<<<< HEAD:test/fiuba/algo3/starcraft/logic/test/player/integration/structures/ProtossMineralExploiterTest.java
		Resources initialResources = new Resources(200,0);
<<<<<<< HEAD
		Player player = new Player(null, null, null, null, initialResources, null);
		NexoMineralTemplate templateNexo = NexoMineralTemplate.getInstance();
=======
		Player player = new Player(null, null, null, null, initialResources);
=======
>>>>>>> 824aaf7355d45cd0f5838133b0fed5b3b78765f8:test/fiuba/algo3/starcraft/integration/structures/ProtossMineralExploiterTest.java
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
>>>>>>> 60e498f1e7e1aa5a87dcdeb177fa693c0e02424f
		for(int i = 0; i < 4; i++) {
			MineralExploiter nexoMineral = templateNexo.create(position);	
			player.pays(50,0);
			player.receiveNewStructure(nexoMineral);
		}
	
		for(int i = 0; i < 30; i++) player.newTurn();
		
		assertEquals(player.getMineral(), 1200);
	}
	
	@Test
	public void test2TurnAdds10MWith1NexoMineralIfItLives1Turn() throws InsufficientResources {
<<<<<<< HEAD:test/fiuba/algo3/starcraft/logic/test/player/integration/structures/ProtossMineralExploiterTest.java
		Resources initialResources = new Resources(200,0);
<<<<<<< HEAD
		Player player = new Player(null, null, null, null, initialResources, null);
		NexoMineralTemplate templateNexo = NexoMineralTemplate.getInstance();
=======
		Player player = new Player(null, null, null, null, initialResources);
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
>>>>>>> 60e498f1e7e1aa5a87dcdeb177fa693c0e02424f
		MineralExploiter nexoMineral = templateNexo.create(null);
=======
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
		MineralExploiter nexoMineral = templateNexo.create(position);
>>>>>>> 824aaf7355d45cd0f5838133b0fed5b3b78765f8:test/fiuba/algo3/starcraft/integration/structures/ProtossMineralExploiterTest.java
		player.pays(50,0);
		player.receiveNewStructure(nexoMineral);
		player.newTurn();

		nexoMineral.reduceLife(500);
		player.newTurn();
		
		assertEquals(player.getMineral(), 160);
	}
	
	@Test
	public void test3TurnsAdd30MWith3NexoMineralAnd2Destroyed() throws InsufficientResources {
<<<<<<< HEAD:test/fiuba/algo3/starcraft/logic/test/player/integration/structures/ProtossMineralExploiterTest.java
		Resources initialResources = new Resources(200,0);
<<<<<<< HEAD
		Player player = new Player(null, null, null, null, initialResources, null);
		NexoMineralTemplate templateNexo = NexoMineralTemplate.getInstance();
=======
		Player player = new Player(null, null, null, null, initialResources);
=======
>>>>>>> 824aaf7355d45cd0f5838133b0fed5b3b78765f8:test/fiuba/algo3/starcraft/integration/structures/ProtossMineralExploiterTest.java
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
>>>>>>> 60e498f1e7e1aa5a87dcdeb177fa693c0e02424f
		for(int i = 0; i < 3; i++) {
			MineralExploiter nexoMineral = templateNexo.create(position);	
			player.pays(50,0);
			player.receiveNewStructure(nexoMineral);
			if (i != 0) nexoMineral.reduceLife(500);
		}
	
		for(int i = 0; i < 3; i++) player.newTurn();
		
		//Le quedaron 50M de los 200M iniciales
		assertEquals(player.getMineral(), 80);
	}
	
	@Test
	public void test4TurnsLeavesPlayerWith60MIfHeBuilds4NexoMineralAnd2AreDestroyedInstantly() throws InsufficientResources {
<<<<<<< HEAD:test/fiuba/algo3/starcraft/logic/test/player/integration/structures/ProtossMineralExploiterTest.java
		Resources initialResources = new Resources(200,0);
<<<<<<< HEAD
		Player player = new Player(null, null, null, null, initialResources, null);
		NexoMineralTemplate templateNexo = NexoMineralTemplate.getInstance();
=======
		Player player = new Player(null, null, null, null, initialResources);
=======
>>>>>>> 824aaf7355d45cd0f5838133b0fed5b3b78765f8:test/fiuba/algo3/starcraft/integration/structures/ProtossMineralExploiterTest.java
		NexoMineralTemplate templateNexo = new NexoMineralTemplate();
>>>>>>> 60e498f1e7e1aa5a87dcdeb177fa693c0e02424f
		for(int i = 0; i < 4; i++) {
			MineralExploiter nexoMineral = templateNexo.create(position);	
			player.pays(50,0);
			player.receiveNewStructure(nexoMineral);
			if (i%2 != 0) nexoMineral.reduceLife(500);
			player.newTurn();
		}

		assertEquals(player.getMineral(), 60);
	}
}
